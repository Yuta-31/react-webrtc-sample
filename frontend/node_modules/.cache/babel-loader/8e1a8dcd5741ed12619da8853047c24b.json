{"ast":null,"code":"var _jsxFileName = \"/Users/yuta/Documents/work/web-rtc/frontend/src/VideoConnect2.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './Video.css';\nimport socketClient from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SERVER = \"http://localhost:3001\";\nconst socket = socketClient(SERVER);\nvar isHost = false;\nvar room = 'hoge';\nlet config = {\n  \"iceServers\": [{\n    \"urls\": \"stun:stun.l.google.com:19302\"\n  }, {\n    \"urls\": \"stun:stun1.l.google.com:19302\"\n  }, {\n    \"urls\": \"stun:stun2.l.google.com:19302\"\n  }]\n};\nexport default function VideoView() {\n  _s();\n\n  const localVideoRef = React.useRef(null);\n  const remoteVideoRef = React.useRef(null);\n  const [isKnocking, setIsKnocking] = React.useState(false);\n  const [canCalling, setCanCalling] = React.useState(false);\n  const constraints = {\n    video: true,\n    audio: false\n  };\n  const offerOptions = {\n    offerToReceiveVideo: 1\n  };\n  var localPeerConnection = null;\n  var remotePeerConnection = null;\n  var localStream = null;\n  var remoteStream = null;\n  var peerConnection = null;\n  var isStarted = false;\n  socket.on('knocked response', (numClients, room) => {\n    if (numClients === 0) {\n      socket.emit('create', room);\n    } else if (numClients === 1) {\n      socket.emit('join', room);\n    } else {\n      console.log(\"room [\" + room + \"] is full.\");\n    }\n  });\n  socket.on('created', room => {\n    console.log('[Server said] you created room [' + room + ']');\n    isHost = true;\n\n    if (!isStarted) {\n      startConnect();\n    }\n  });\n  socket.on('joined', (room, id) => {\n    console.log('[Server said] ' + id + ' joined room [' + room + ']');\n\n    if (isHost) {\n      setIsKnocking(true);\n    } else {\n      startConnect();\n    }\n  });\n  socket.on('allowed', () => {\n    console.log('allowed!');\n    remoteVideoRef.current.srcObject = remoteStream;\n  });\n  socket.on('offer', description => {\n    if (!isHost && !isStarted) {\n      startConnect();\n    }\n\n    peerConnection.setRemoteDescription(description);\n    peerConnection.createAnswer().then(setLocalAndSendMessage).then(handleError);\n  });\n  socket.on('answer', description => {\n    if (isStarted) {\n      peerConnection.setRemoteDescription(description);\n    }\n  });\n  socket.on('candidate', description => {\n    if (isStarted) {\n      peerConnection.addIceCandidate(new RTCIceCandidate({\n        sdpMLineIndex: description.label,\n        candidate: description.candidate\n      }));\n    }\n  });\n\n  function createPeerConnection() {\n    try {\n      peerConnection = new RTCPeerConnection(config);\n      peerConnection.onicecandidate = handleConnection;\n      peerConnection.onaddstream = handleAddStream;\n      peerConnection.onremovestream = handleRemoveStream;\n      console.log('PeerConnection is created');\n    } catch (error) {\n      console.log('[ERROR]', error);\n      return;\n    }\n  }\n\n  function handleConnection(event) {\n    if (event.candidate) {\n      socket.emit('message', {\n        type: 'candidate',\n        label: event.candidate.sdpMLineIndex,\n        id: event.candidate.sdpMid,\n        candidate: event.candidate.candidate\n      });\n    } else {\n      console.log('End of candidates');\n    }\n  }\n\n  function handleAddStream(event) {\n    remoteStream = event.stream;\n  }\n\n  function handleRemoveStream(event) {\n    console.log(event);\n  }\n\n  function startConnect() {\n    createPeerConnection();\n\n    for (const track of localStream.getTracks()) {\n      peerConnection.addTrack(track);\n    } //peerConnection.addStream(localStream);\n\n\n    isStarted = true;\n\n    if (isHost) {\n      peerConnection.createOffer(offerOptions).then(setLocalAndSendMessage).catch(handleError);\n    }\n  }\n\n  function setLocalAndSendMessage(description) {\n    peerConnection.setLocalDescription(description);\n    socket.emit('message', description);\n  }\n\n  function handleError(error) {\n    console.log(\"[ERROR]\", error);\n  }\n\n  function allowJoin() {\n    console.log('allow');\n    socket.emit('allow');\n  }\n\n  function calling() {\n    socket.emit('knock', room);\n  }\n\n  React.useEffect(() => {\n    navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n      localStream = stream;\n      console.log(localStream);\n      localVideoRef.current.srcObject = stream;\n      setCanCalling(true);\n    }).catch(error => {\n      console.log(\"ERROR\", error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"VideoView\",\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      playsInline: true,\n      autoPlay: true,\n      ref: localVideoRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      playsInline: true,\n      autoPlay: true,\n      ref: remoteVideoRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: allowJoin,\n      disabled: !isKnocking,\n      children: \"ALLOW\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: calling,\n      disabled: !canCalling,\n      children: \"CALL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VideoView, \"hfH0QN0ldYWlnNrsRfAnlOGduus=\");\n\n_c = VideoView;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoView\");","map":{"version":3,"sources":["/Users/yuta/Documents/work/web-rtc/frontend/src/VideoConnect2.js"],"names":["React","socketClient","SERVER","socket","isHost","room","config","VideoView","localVideoRef","useRef","remoteVideoRef","isKnocking","setIsKnocking","useState","canCalling","setCanCalling","constraints","video","audio","offerOptions","offerToReceiveVideo","localPeerConnection","remotePeerConnection","localStream","remoteStream","peerConnection","isStarted","on","numClients","emit","console","log","startConnect","id","current","srcObject","description","setRemoteDescription","createAnswer","then","setLocalAndSendMessage","handleError","addIceCandidate","RTCIceCandidate","sdpMLineIndex","label","candidate","createPeerConnection","RTCPeerConnection","onicecandidate","handleConnection","onaddstream","handleAddStream","onremovestream","handleRemoveStream","error","event","type","sdpMid","stream","track","getTracks","addTrack","createOffer","catch","setLocalDescription","allowJoin","calling","useEffect","navigator","mediaDevices","getUserMedia"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Video.css';\nimport socketClient from 'socket.io-client';\n\nconst SERVER = \"http://localhost:3001\";\n\nconst socket = socketClient(SERVER);\n\nvar isHost = false;\nvar room = 'hoge';\n\nlet config = {\n  \"iceServers\": [\n    { \"urls\": \"stun:stun.l.google.com:19302\" },\n    { \"urls\": \"stun:stun1.l.google.com:19302\" },\n    { \"urls\": \"stun:stun2.l.google.com:19302\" },\n  ]\n};\n\nexport default function VideoView() {\n  const localVideoRef = React.useRef(null);\n  const remoteVideoRef = React.useRef(null);\n  const [isKnocking, setIsKnocking] = React.useState(false);\n  const [canCalling, setCanCalling] = React.useState(false);\n  const constraints = {\n    video: true,\n    audio: false,\n  }\n  const offerOptions = {\n    offerToReceiveVideo: 1,\n  }\n  var localPeerConnection = null;\n  var remotePeerConnection = null;\n  var localStream = null;\n  var remoteStream = null;\n  var peerConnection = null;\n  var isStarted = false;\n\n  socket.on('knocked response', (numClients, room) => {\n    if (numClients === 0) {\n      socket.emit('create', room);\n    } else if (numClients === 1) {\n      socket.emit('join', room);\n    } else {\n      console.log(\"room [\" + room + \"] is full.\");\n    }\n  });\n  socket.on('created', (room) => {\n    console.log('[Server said] you created room [' + room + ']');\n    isHost = true;\n    if (!isStarted) {\n      startConnect();\n    }\n  });\n  socket.on('joined', (room, id) => {\n    console.log('[Server said] ' + id + ' joined room [' + room + ']');\n    if (isHost) {\n      setIsKnocking(true);\n    } else {\n      startConnect();\n    }\n  });\n  socket.on('allowed', () => {\n    console.log('allowed!');\n    remoteVideoRef.current.srcObject = remoteStream;\n  });\n  socket.on('offer', (description) => {\n    if (!isHost && !isStarted) {\n      startConnect();\n    }\n    peerConnection.setRemoteDescription(description);\n    peerConnection.createAnswer()\n      .then(setLocalAndSendMessage)\n      .then(handleError);\n  });\n  socket.on('answer', (description) => {\n    if (isStarted) {\n      peerConnection.setRemoteDescription(description);\n    }\n  });\n  socket.on('candidate', (description) => {\n    if (isStarted) {\n      peerConnection.addIceCandidate(\n        new RTCIceCandidate({\n          sdpMLineIndex: description.label,\n          candidate: description.candidate,\n        })\n      );\n    }\n  });\n\n\n  function createPeerConnection() {\n    try {\n      peerConnection = new RTCPeerConnection( config );\n      peerConnection.onicecandidate = handleConnection;\n      peerConnection.onaddstream = handleAddStream;\n      peerConnection.onremovestream = handleRemoveStream;\n      console.log('PeerConnection is created');\n    } catch (error) {\n      console.log('[ERROR]', error);\n      return;\n    }\n  }\n  function handleConnection(event) {\n    if (event.candidate) {\n      socket.emit('message', {\n        type: 'candidate',\n        label: event.candidate.sdpMLineIndex,\n        id: event.candidate.sdpMid,\n        candidate: event.candidate.candidate\n      });\n    } else {\n      console.log('End of candidates');\n    }\n  }\n  function handleAddStream(event) {\n    remoteStream = event.stream;\n  }\n  function handleRemoveStream(event) {\n    console.log(event);\n  }\n  function startConnect() {\n    createPeerConnection();\n    for (const track of localStream.getTracks()) {\n      peerConnection.addTrack(track);\n    }\n    //peerConnection.addStream(localStream);\n    isStarted = true;\n    if (isHost) {\n      peerConnection.createOffer(offerOptions)\n        .then(setLocalAndSendMessage)\n        .catch(handleError);\n    }\n  }\n  function setLocalAndSendMessage(description) {\n    peerConnection.setLocalDescription(description);\n    socket.emit('message', description);\n  }\n  function handleError(error) {\n    console.log(\"[ERROR]\", error)\n  }\n  function allowJoin() {\n    console.log('allow');\n    socket.emit('allow');\n  }\n  function calling() {\n    socket.emit('knock', room);\n  }\n\n  React.useEffect(() => {\n    navigator.mediaDevices.getUserMedia(constraints)\n      .then((stream) => {\n        localStream = stream;\n        console.log(localStream);\n        localVideoRef.current.srcObject = stream;\n        setCanCalling(true);\n      })\n      .catch((error) => {\n        console.log(\"ERROR\", error);\n      });\n  }, []);\n\n  return (\n    <div className=\"VideoView\">\n      <video playsInline autoPlay ref={localVideoRef} />\n      <video playsInline autoPlay ref={remoteVideoRef} />\n      <br />\n      <button onClick={allowJoin} disabled={!isKnocking}>ALLOW</button>\n      <button onClick={calling} disabled={!canCalling}>CALL</button>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}